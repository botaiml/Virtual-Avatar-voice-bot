
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/Avatar.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useRef } from "react";
// import { useGLTF } from "@react-three/drei";
import { useLoader } from "@react-three/fiber";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { useAnimations, useFBX } from "@react-three/drei";
import { useState } from "react";
import { useEffect } from "react";
import { useControls } from "leva";
import { useMemo } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { Expression } from "./FacialAnimation";
import * as THREE from "three";
import {
  expression_que,
  avatar_smile,
  avatar_blink,
  avatar_speak,
} from "../helpers/expression-helpers";
import axios from "axios";
import { SpeechApiService } from "../services/speechApiService";

export function Avatar(props) {
  // const [audio_bytes, setaudio_bytes] = useState();
  // const { nodes, materials, scene } = useGLTF("/models/Avatar.glb");
  const { playAudio, script, morphTargetSmoothing, smoothMorphTarget } =
    useControls({
      playAudio: false,
      smoothMorphTarget: true,
      morphTargetSmoothing: 0.2,
      script: {
        value: "hello",
        options: ["hello", "dilg_1", "dilg_2", "dilg_3", "dilg_4", "dilg_5", "dilg_6", "dilg_7", "dilg_8", "dilg_9",  "dilg_10", "dilg_11", "dilg_12",  "dilg_13"],
      },
    });

  const headFollow = true;

  const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script]);
  // const audioBuffer = useMemo(() => {
  //   if (!audio_bytes) return null;
  //   console.log("INTO AUDIO BUFFER")
  //   // Convert audio bytes to an audio buffer
  //   const audioContext = new (window.AudioContext ||
  //     window.webkitAudioContext)();
  //   return new Promise((resolve) => {
  //     audioContext.decodeAudioData(audio_bytes, (buffer) => {
  //       resolve(buffer);
  //     });
  //   });
  // }, [audio_bytes]);


  useEffect(() => {
    if (playAudio) {
      audio.play();
    } else {
      audio.pause();
    }
  }, [playAudio, script]);

  let { nodes, materials, scene } = useLoader(
    GLTFLoader,
    "models/Avatar_2.glb"
  );
  materials.skinning = true;
  // const { nodes, materials, scene } = useGLTF('/model.gltf');

  const { animations: idle_1 } = useFBX("/animations/animation_1.fbx");
  const { animations: idle_2 } = useFBX("/animations/animation_2.fbx");
  const { animations: idle_3 } = useFBX("/animations/animation_3.fbx");
  const { animations: idle_4 } = useFBX("/animations/animation_4.fbx");
  const { animations: idle_5 } = useFBX("/animations/animation_5.fbx");
  const { animations: idle_6 } = useFBX("/animations/animation_6.fbx");
  const { animations: waving } = useFBX("/animations/Waving.fbx");


  // console.log(idle_1)

  idle_1[0].name = "idle_1";
  idle_2[0].name = "idle_2";
  idle_3[0].name = "idle_3";
  idle_4[0].name = "idle_4";
  idle_5[0].name = "idle_5";
  idle_6[0].name = "idle_6";
  waving[0].name = "waving";

  const [animation, setAnimation] = useState("waving");

  const group = useRef();
  const { actions } = useAnimations(
    [idle_1[0], idle_2[0], idle_3[0], idle_4[0], idle_4[0], idle_6[0], waving[0]],
    group
  );

  const dialogue =
    "Hello, I am a virtual Avatar a bot designed by Integra Private Limited";

  // console.log(expression_que.smile_que);

  // //useEffect(async () => {
  //   try {
  //     const { metadata, mouthCues } = await SpeechApiService.getSpeechData(
  //       dialogue
  //     );

  //     setaudio_bytes(metadata.soundFile);
  //     const duration = metadata.duration;

  //     debugger;
  //   } catch (error) {
  //     throw console.error("Error in face detection:", error);
  //   }
  // }, []);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  useFrame((state) => {
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
  });

  useFrame((state) => {
    const smile_nodes = avatar_smile(nodes, morphTargetSmoothing);
    nodes = smile_nodes;
  });

  let j = 0;

  useFrame((state) => {
    const blink_nodes = avatar_blink(nodes, morphTargetSmoothing);
    nodes = blink_nodes;
  });

  useFrame(() => {
    if (audio.paused || audio.ended) {
      setAnimation("waving");
      return;
    }

    const audio_nodes = avatar_speak(nodes, morphTargetSmoothing, audio, script);
    nodes = audio_nodes;
  });

  const upperTeethMaterial = useMemo(() => {
    const material = new THREE.MeshStandardMaterial({
      // color: 0xFFFFFF, // Adjust the initial color as needed
      roughness: 0, // Adjust roughness
      metalness: 0.0, // Adjust metalness
      map: materials.AvatarTeethUpper.map, // Replace '/path/to/teeth_texture.jpg' with the actual path to your image
      // Add other material properties here if needed
    });

    material.color.multiplyScalar(3); // You can adjust the factor as needed

    // Enable shadows for the material
    material.shadowSide = THREE.FrontSide;
    material.receiveShadow = true;

    return material;
  }, [materials]); //

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={scene} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <skinnedMesh
          geometry={nodes.AvatarBody.geometry}
          material={materials.AvatarBody}
          skeleton={nodes.AvatarBody.skeleton}
        />
        <skinnedMesh
          name="AvatarEyelashes"
          geometry={nodes.AvatarEyelashes.geometry}
          material={materials.AvatarEyelashes}
          skeleton={nodes.AvatarEyelashes.skeleton}
          morphTargetDictionary={nodes.AvatarEyelashes.morphTargetDictionary}
          morphTargetInfluences={nodes.AvatarEyelashes.morphTargetInfluences}
        />
        <skinnedMesh
          name="AvatarHead"
          geometry={nodes.AvatarHead.geometry}
          material={materials.AvatarHead}
          skeleton={nodes.AvatarHead.skeleton}
          morphTargetDictionary={nodes.AvatarHead.morphTargetDictionary}
          morphTargetInfluences={nodes.AvatarHead.morphTargetInfluences}
        />
        <skinnedMesh
          geometry={nodes.AvatarLeftCornea.geometry}
          material={materials.AvatarLeftCornea}
          skeleton={nodes.AvatarLeftCornea.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarLeftEyeball.geometry}
          material={materials.AvatarLeftEyeball}
          skeleton={nodes.AvatarLeftEyeball.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarRightCornea.geometry}
          material={materials.AvatarRightCornea}
          skeleton={nodes.AvatarRightCornea.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarRightEyeball.geometry}
          material={materials.AvatarRightEyeball}
          skeleton={nodes.AvatarRightEyeball.skeleton}
        />
        <skinnedMesh
          name="AvatarTeethLower"
          geometry={nodes.AvatarTeethLower.geometry}
          material={materials.AvatarTeethLower}
          skeleton={nodes.AvatarTeethLower.skeleton}
          morphTargetDictionary={nodes.AvatarTeethLower.morphTargetDictionary}
          morphTargetInfluences={nodes.AvatarTeethLower.morphTargetInfluences}
        />
        <skinnedMesh
          geometry={nodes.AvatarTeethUpper.geometry}
          skeleton={nodes.AvatarTeethUpper.skeleton}
          material={upperTeethMaterial}
          castShadow
          onUpdate={(self) => (self.position.y = 0.1)}  // Adjust the Y-coordinate as needed
        />
        <skinnedMesh
          geometry={nodes.haircut.geometry}
          material={materials.haircut}
          skeleton={nodes.haircut.skeleton}
        />
        <skinnedMesh
          geometry={nodes.outfit_bottom.geometry}
          material={materials.outfit_bottom}
          skeleton={nodes.outfit_bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.outfit_shoes.geometry}
          material={materials.outfit_shoes}
          skeleton={nodes.outfit_shoes.skeleton}
        />
        <skinnedMesh
          geometry={nodes.outfit_top.geometry}
          material={materials.outfit_top}
          skeleton={nodes.outfit_top.skeleton}
        />
      </group>
    </group>
  );
}

// useGLTF.preload("/models/Avatar_2.glb");

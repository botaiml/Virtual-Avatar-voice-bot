/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/Avatar.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useRef } from "react";
import { useLoader } from "@react-three/fiber";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { useAnimations, useFBX } from "@react-three/drei";
import { useState } from "react";
import { useEffect } from "react";
import { useControls } from "leva";
import { useMemo } from "react";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export function Avatar(props) {
  const {
    playAudio,
    script,
    morphTargetSmoothing,
    smoothMorphTarget
  } = useControls({
    playAudio: false,
    smoothMorphTarget: true,
    morphTargetSmoothing: 0.5,
    script: {
      value: "hello",
      options: ["hello"],
    },
  });

  const headFollow = true;

  const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script]);

  useEffect(() => {
    if (playAudio) {
      audio.play();
    } else {
      audio.pause();
    }
  }, [playAudio, script]);

  const { nodes, materials, scene } = useLoader(
    GLTFLoader,
    "models/Avatar.glb"
  );

  const { animations: idle_1 } = useFBX("/animations/animation_1.fbx");
  const { animations: idle_2 } = useFBX("/animations/animation_2.fbx");
  const { animations: idle_3 } = useFBX("/animations/animation_3.fbx");
  const { animations: idle_4 } = useFBX("/animations/animation_4.fbx");
  const { animations: idle_5 } = useFBX("/animations/animation_5.fbx");
  const { animations: idle_6 } = useFBX("/animations/animation_6.fbx");

  idle_1[0].name = "idle_1";
  idle_2[0].name = "idle_2";
  idle_3[0].name = "idle_3";
  idle_4[0].name = "idle_4";
  idle_5[0].name = "idle_5";
  idle_6[0].name = "idle_6";

  const [animation, setAnimation] = useState("idle_6");

  const group = useRef();
  const { actions } = useAnimations(
    [idle_1[0], idle_2[0], idle_3[0], idle_4[0], idle_5[0], idle_6[0]],
    group
  );

  const facialExpressions = {
    default: {},
    smile_1: {
      browInnerUp: 0.3,
      eyeSquintLeft: 0.6,
      eyeSquintRight: 0.6,
      noseSneerLeft: 0.2,
      noseSneerRight: 0.2,
      mouthPressLeft: 0.4,
      mouthPressRight: 0.4,
      mouthSmileRight: 0.7,
      mouthSmileLeft: 0.7,
    },
    // Add more expressions as needed
  };

  const lerpMorphTarget = (target, value, speed = 0.001) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );
      }
    });
  };

  const randomExpression = () => {
    const expressions = Object.keys(facialExpressions);
    const randomExpression =
      expressions[Math.floor(Math.random() * expressions.length)];
    const expressionValues = facialExpressions[randomExpression];
    Object.keys(expressionValues).forEach((key) => {
      lerpMorphTarget(
        key,
        expressionValues[key],
        THREE.MathUtils.randFloat(0.1, 0.3)
      );
    });
  };

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  useFrame((state) => {
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
  });

  useFrame((state) => {
    randomExpression();
  });

  useFrame((state) => {
    const curr_blink_time = new Date().getSeconds();
    Object.values(expression_que.blinkque).forEach((value) => {
      if (!smoothMorphTarget) {
        nodes.AvatarHead.morphTargetInfluences[
          nodes.AvatarHead.morphTargetDictionary[value]
        ] = 0;
        nodes.AvatarTeethLower.morphTargetInfluences[
          nodes.AvatarTeethLower.morphTargetDictionary[value]
        ] = 0;
      } else {
        nodes.AvatarHead.morphTargetInfluences[
          nodes.AvatarHead.morphTargetDictionary[value]
        ] = THREE.MathUtils.lerp(
          nodes.AvatarHead.morphTargetInfluences[
            nodes.AvatarHead.morphTargetDictionary[value]
          ],
          0,
          morphTargetSmoothing
        );

        nodes.AvatarTeethLower.morphTargetInfluences[
          nodes.AvatarTeethLower.morphTargetDictionary[value]
        ] = THREE.MathUtils.lerp(
          nodes.AvatarTeethLower.morphTargetInfluences[
            nodes.AvatarTeethLower.morphTargetDictionary[value]
          ],
          0,
          morphTargetSmoothing
        );
      }
    });

    for (let i = 0; i < expression_que.blinkque.length; i++) {
      const blinkCue = expression_que.blinkque[i];
      if (
        (curr_blink_time + 1) >= blinkCue.start &&
        (curr_blink_time + 1) <= blinkCue.end
      ) {
        if (!smoothMorphTarget) {
          nodes.AvatarHead.morphTargetInfluences[
            nodes.AvatarHead.morphTargetDictionary[
              "eyeBlinkRight"
            ]
          ] = blinkCue.value;
          nodes.AvatarTeethLower.morphTargetInfluences[
            nodes.AvatarTeethLower.morphTargetDictionary[
              "eyeBlinkRight"
            ]
          ] = blinkCue.value;
        } else {
          nodes.AvatarHead.morphTargetInfluences[
            nodes.AvatarHead.morphTargetDictionary[
              "eyeBlinkRight"
            ]
          ] = THREE.MathUtils.lerp(
            nodes.AvatarHead.morphTargetInfluences[
              nodes.AvatarHead.morphTargetDictionary[
                "eyeBlinkRight"
              ]
            ],
            blinkCue.value,
            morphTargetSmoothing
          );
          nodes.AvatarTeethLower.morphTargetInfluences[
            nodes.AvatarTeethLower.morphTargetDictionary[
              "eyeBlinkRight"
            ]
          ] = THREE.MathUtils.lerp(
            nodes.AvatarTeethLower.morphTargetInfluences[
              nodes.AvatarTeethLower.morphTargetDictionary[
                "eyeBlinkRight"
              ]
            ],
            blinkCue.value,
            morphTargetSmoothing
          );
          nodes.AvatarHead.morphTargetInfluences[
            nodes.AvatarHead.morphTargetDictionary[
              "eyeBlinkLeft"
            ]
          ] = THREE.MathUtils.lerp(
            nodes.AvatarHead.morphTargetInfluences[
              nodes.AvatarHead.morphTargetDictionary[
                "eyeBlinkLeft"
              ]
            ],
            blinkCue.value,
            morphTargetSmoothing
          );
          nodes.AvatarTeethLower.morphTargetInfluences[
            nodes.AvatarTeethLower.morphTargetDictionary[
              "eyeBlinkLeft"
            ]
          ] = THREE.MathUtils.lerp(
            nodes.AvatarTeethLower.morphTargetInfluences[
              nodes.AvatarTeethLower.morphTargetDictionary[
                "eyeBlinkLeft"
              ]
            ],
            blinkCue.value,
            morphTargetSmoothing
          );
        }
        break;
      }
    }
  });

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={scene} />
      <group rotation={[Math.PI / 2, 0, 0]}>
        <skinnedMesh
          geometry={nodes.AvatarBody.geometry}
          material={materials.AvatarBody}
          skeleton={nodes.AvatarBody.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarLeftCornea.geometry}
          material={materials.AvatarLeftCornea}
          skeleton={nodes.AvatarLeftCornea.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarLeftEyeball.geometry}
          material={materials.AvatarLeftEyeball}
          skeleton={nodes.AvatarLeftEyeball.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarRightCornea.geometry}
          material={materials.AvatarRightCornea}
          skeleton={nodes.AvatarRightCornea.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarRightEyeball.geometry}
          material={materials.AvatarRightEyeball}
          skeleton={nodes.AvatarRightEyeball.skeleton}
        />
        <skinnedMesh
          geometry={nodes.AvatarTeethUpper.geometry}
          material={materials.AvatarTeethUpper}
          skeleton={nodes.AvatarTeethUpper.skeleton}
        />
        <skinnedMesh
          geometry={nodes.haircut.geometry}
          material={materials.haircut}
          skeleton={nodes.haircut.skeleton}
        />
        <skinnedMesh
          geometry={nodes.outfit_bottom.geometry}
          material={materials.outfit_bottom}
          skeleton={nodes.outfit_bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.outfit_shoes.geometry}
          material={materials.outfit_shoes}
          skeleton={nodes.outfit_shoes.skeleton}
        />
        <skinnedMesh
          geometry={nodes.outfit_top.geometry}
          material={materials.outfit_top}
          skeleton={nodes.outfit_top.skeleton}
        />
        <skinnedMesh
          name="AvatarEyelashes"
          geometry={nodes.AvatarEyelashes.geometry}
          material={materials.AvatarEyelashes}
          skeleton={nodes.AvatarEyelashes.skeleton}
          morphTargetDictionary={nodes.AvatarEyelashes.morphTargetDictionary}
          morphTargetInfluences={nodes.AvatarEyelashes.morphTargetInfluences}
        />
        <skinnedMesh
          name="AvatarHead"
          geometry={nodes.AvatarHead.geometry}
          material={materials.AvatarHead}
          skeleton={nodes.AvatarHead.skeleton}
          morphTargetDictionary={nodes.AvatarHead.morphTargetDictionary}
          morphTargetInfluences={nodes.AvatarHead.morphTargetInfluences}
        />
        <skinnedMesh
          name="AvatarTeethLower"
          geometry={nodes.AvatarTeethLower.geometry}
          material={materials.AvatarTeethLower}
          skeleton={nodes.AvatarTeethLower.skeleton}
          morphTargetDictionary={nodes.AvatarTeethLower.morphTargetDictionary}
          morphTargetInfluences={nodes.AvatarTeethLower.morphTargetInfluences}
        />
      </group>
    </group>
  );
}
